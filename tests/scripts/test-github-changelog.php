<?php

declare( strict_types=1 );

use PHPUnit\Framework\TestCase;

require_once __DIR__ . '/../../lib/github-changelog.php';

define( 'PR_CHANGELOG_START_MARKER', '<h2>Changelog Description' );
define( 'PR_CHANGELOG_END_MARKER', '<h2>' );
define( 'LINK_TO_PR', false );
define( 'PROJECT_REPONAME', 'test-project' );

class GitHub_Changelog_Test extends TestCase {
	public function test_get_changelog_html(): void {
		$pr = array();

		$pr['body'] = '# Description
		
Changes were made

## A different section

Content here

## Changelog Description

### This is my changelog title

<!-- An HTML Comment -->

Things we did:

* Fixed a bug
* Fixed another bug

## And another section that isn\'t a changelog

Foo Bar!';

		$changelog = get_changelog_html( $pr );

		$this->assertEquals(
			'<h3>This is my changelog title</h3>
<p>Things we did:</p>
<ul>
<li>Fixed a bug</li>
<li>Fixed another bug</li>
</ul>',
			$changelog
		);
	}

	public function test_get_changelog_categories() {
		define( 'WP_CHANGELOG_CATEGORIES', 'foo,bar,,baz' );

		$categories = get_changelog_categories();

		$expected = array(
			'foo',
			'bar',
			'baz',
		);

		$this->assertEquals( $expected, $categories );
	}

	public function test_build_changelog_request_body() {
		define( 'WP_CHANGELOG_STATUS', 'publish' );

		$title      = 'foo title';
		$content    = 'foo content';
		$tags       = array( 1, 2, 3 );
		$channels   = array( 'foo channel 1' );
		$categories = array( 'foo category', 'bar category' );

		$body = build_changelog_request_body( $title, $content, $tags, $channels, $categories );

		$expected = array(
			'title'           => $title,
			'content'         => $content,
			'excerpt'         => $title,
			'status'          => 'publish',
			'tags'            => implode( ',', $tags ),
			'categories'      => implode( ',', $categories ),
			'release-channel' => implode( ',', $channels ),
		);

		$this->assertEquals( $expected, $body );
	}

	public function test_parse_changelog_html_with_autogenerated_date_title(): void {
		$pr = array();

		$html = '<h3>Fixed</h3>
<ul>
<li>Fixed a bug</li>
<li>Fixed another bug</li>
</ul>';

		$parsed = parse_changelog_html( $html );

		$this->assertEquals( 'test-project ' . gmdate( 'o-m-d H:i' ), $parsed['title'] );
		$this->assertEquals(
			'<h3>Fixed</h3>
<ul>
<li>Fixed a bug</li>
<li>Fixed another bug</li>
</ul>',
			$parsed['content']
		);
	}

	public function test_parse_changelog_html_with_duplicate_sections() {
		$html = '<h3>Fixed</h3>
		<ul>
		<li>Fixed a bug</li>
		</ul>
		<h3>Fixed</h3>
		<ul>
		<li>Fixed another bug</li>
		</ul>';

		$parsed = parse_changelog_html( $html );

		$this->assertEquals( 'test-project ' . gmdate( 'o-m-d H:i' ), $parsed['title'] );
		$this->assertEquals(
			'<h3>Fixed</h3>
<ul>
<li>Fixed a bug</li>
<li>Fixed another bug</li>
</ul>',
			$parsed['content']
		);
	}

	/**
	 * @dataProvider changelog_html_provider
	 */
	public function test_aggregate_changelog_headings( string $input, string $expected ) {
		$this->assertEquals(
			$expected,
			aggregate_changelog_headings( $input )
		);
	}

	public function changelog_html_provider(): array {
		return array(
			'original test case'       => array(
				'<h3>Fixed</h3>
				<ul>
				<li>Fixed a bug</li>
				</ul>
				<h3>Added</h3>
				<ul>
				<li>Added a feature</li>
				<li>Added another feature</li>
				</ul>
				<h3>Fixed</h3>
				<ul>
				<li>Fixed another bug</li>
				</ul>
				<h3>Added</h3>
				<p>Added yet another feature</p>',
				'<h3>Fixed</h3>
<ul>
<li>Fixed a bug</li>
<li>Fixed another bug</li>
</ul>
<h3>Added</h3>
<ul>
<li>Added a feature</li>
<li>Added another feature</li>
<li>Added yet another feature</li>
</ul>',
			),
			'empty input'              => array(
				'',
				'',
			),
			'single heading'           => array(
				'<h3>Fixed</h3>',
				'',
			),
			'content without headings' => array(
				'<p>Some content</p>',
				'',
			),
			'content with code tags'   => array(
				'<h3>Fixed</h3>
				<ul>
				<li>Fixed a bug in <code>function()</code></li>
				</ul>
				<h3>Added</h3>
				<p>Added a <code>feature</code></p>',
				'<h3>Fixed</h3>
<ul>
<li>Fixed a bug in <code>function()</code></li>
</ul>
<h3>Added</h3>
<ul>
<li>Added a <code>feature</code></li>
</ul>',
			),
		);
	}
}
